pipeline {
    agent any
    
 /* environment {
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "192.168.1.14:8081"
        NEXUS_REPOSITORY = "maven-releases"
        NEXUS_CREDENTIAL_ID = "nexus-user-credentials"
    }*/
        
    stages {
        stage('Checkout GIT') {
            steps {
                echo 'Pulling'
                git branch: 'ibtiProduit',
                credentialsId: 'cred',
                url: 'https://github.com/ibtchy/ProjetDevOps.git';
                
            }
        }
         stage('Maven Version'){
            steps {
                sh 'mvn -version'
            }
        }
        
        stage('compile'){
            steps {
                sh 'mvn compile -e'
            }
        }
      /*  stage('package'){
            steps {
                sh 'mvn clean package -DskipTests'
            }
        } */
        
        stage ('test'){
        steps{
            sh 'mvn test -Dtest="tn.esprit.spring.ProduitServiceImplTests.java"'
        }
        }
       
       /*  stage("sonar"){
        steps {
                withSonarQubeEnv ( installationName: 'SonarQube'){
                sh 'mvn sonar:sonar'
                }
        }
        }  */
        
        stage ('Nexus'){
                steps{
                    sh 'mvn deploy -DskipTests'

                }
        }
      /*  stage ('NEXUS DEPLOY') {
                     steps {
                         sh 'mvn clean package deploy:deploy-file -DgroupId=tn.esprit.spring -DartifactId=tpAchatProject -Dversion=1.0 -DgeneratePom=true -Dpackaging=jar -DrepositoryId=deploymentRepo -Durl=http://192.168.1.14:8081/repository/maven-releases/ -Dfile=target/tpAchatProject-1.0.jar -DskipTests'
                     }
                 }*/
              /*   stage("Publish to Nexus Repository Manager") {
            steps {
                script {
                    pom = readMavenPom file: "pom.xml";
                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                    echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                    artifactPath = filesByGlob[0].path;
                    artifactExists = fileExists artifactPath;
                    if(artifactExists) {
                        echo "* File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: pom.groupId,
                            version: pom.version,
                            repository: NEXUS_REPOSITORY,
                            credentialsId: NEXUS_CREDENTIAL_ID,
                            artifacts: [
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: artifactPath,
                                type: pom.packaging],
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: "pom.xml",
                                type: "pom"]
                            ]
                        );
                    } else {
                        error "* File: ${artifactPath}, could not be found";
                    }
                }
            }
        }
       
        */
       
        
        
        
    }
}
